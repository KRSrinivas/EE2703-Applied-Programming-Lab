# -*- coding: utf-8 -*-
"""Assignment9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mQnwj8_2I_Y1jiXKXpSRQkbEJHZGCHb3
"""

# K.R.Srinivas EE18B136 Assignment-9
# Spectra of Non-Periodic Signals

from pylab import *
from mpl_toolkits.mplot3d import Axes3D
import random

def fig_plot(fig_no,w,Y,x_l,Title,ylabel_1,ylabel_2,x_label):
	figure(fig_no)
 
	subplot(2,1,1)
	plot(w,abs(Y),lw=2)
	xlim([-x_l,x_l])
	ylabel(ylabel_1,size=16)
	title(Title)
	grid(True)
 
	subplot(2,1,2)
	plot(w,angle(Y),'ro',lw=2)
	xlim([-x_l,x_l])
	ylabel(ylabel_2,size=16)
	xlabel(x_label,size=16)
	grid(True)
  

# Spectrum of sin(sqrt(2)t); Basic Method

t = linspace(-pi,pi,65); t = t[:-1]
dt = t[1]-t[0]; fmax = 1/dt
y = sin(sqrt(2)*t)
y[0] = 0                                                                        # the sample corresponding to -tmax should be set zeroo
y = fftshift(y)                                                                 # make y start with y(t=0)
Y = fftshift(fft(y))/64.0
w = linspace(-pi*fmax,pi*fmax,65); w = w[:-1]

fig_plot(1,w,Y,10,r"Spectrum of $\sin\left(\sqrt{2}t\right)$",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")


# Spectrum of sin(sqrt(2)t); Using windowing

t = linspace(-4*pi,4*pi,257); t = t[:-1]
dt = t[1]-t[0]; fmax = 1/dt
n = arange(256)

wnd = fftshift(0.54+0.46*cos(2*pi*n/256))                                       # Hamming window

y = sin(sqrt(2)*t)
y = y*wnd
y[0] = 0                                                                        # the sample corresponding to -tmax should be set zeroo
y = fftshift(y)                                                                 # make y start with y(t=0)
Y = fftshift(fft(y))/256.0
w = linspace(-pi*fmax,pi*fmax,257); w = w[:-1]

fig_plot(2,w,Y,4,r"Improved Spectrum of $\sin\left(\sqrt{2}t\right)$",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")

# Spectrum of cos(0.86t)^3 without windowing

y = cos(0.86*t)**3
y[0] = 0
y = fftshift(y)
Y = fftshift(fft(y))/256.0

fig_plot(3,w,Y,4,r"Spectrum of $\cos^{3}(0.86t)$ without windowing ",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")

# Spectrum of cos(0.86t)^3 with windowing

y = cos(0.86*t)**3
y1 = y*wnd
y1[0] = 0
y1 = fftshift(y1)
Y1 = fftshift(fft(y1))/256.0

fig_plot(4,w,Y1,4,r"Spectrum of $\cos^{3}(0.86t)$ with windowing",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")

#  Spectrum of cos(ω0t +δ) and extraction of ω0 and δ.

ω0 = random.uniform(0.5, 1.5)
δ = random.uniform(-pi, pi)

t = linspace(-pi,pi,129)[:-1]
dt = t[1]-t[0]; fmax = 1/dt
n = arange(128)
wnd = fftshift(0.54+0.46*cos(2*pi*n/128))

y = cos(ω0*t + δ)*wnd
y[0]=0
y = fftshift(y)
Y = fftshift(fft(y))/128.0

w = linspace(-pi*fmax,pi*fmax,129); w = w[:-1]

fig_plot(5,w,Y,4,r"Spectrum of $\cos(\omega 0t +\delta)$ with windowing",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")

# Estimation of ω0 as a weighted average of all ω. δ is the phase corresponding the estimated value of ω0.

i = where(w>=0)
w_estimate = argmax(abs(Y[64:]))                                                # ω0 estimated as weighted average (spectrum magnitude assumed to be the weight)
n = abs(w-w_estimate).argmin()                                                  # the closest ω to ω0 is taken as the peak frequency.
phase = angle(Y[n])                                                             # phase corresponding to estimated ω0.

print("Calculated value of w0 : ",w_estimate)
print("Calculated value of delta : ",phase)

#  Spectrum of cos(ω0t +δ) and extraction of ω0 and δ (white gaussian noise added).

y = (cos(ω0*t + δ) + 0.1*randn(128))*wnd
y[0] = 0
y = fftshift(y)
Y = fftshift(fft(y))/128.0

fig_plot(6,w,Y,4,r"Spectrum of $\cos(\omega 0t +\delta) + $white gaussian noise with windowing",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")

# Estimation of ω0 as a weighted average of all ω. δ is the phase corresponding the estimated value of ω0.

i = where(w>=0)
w_estimate = argmax(abs(Y[64:]))                           # ω0 estimated as weighted average (spectrum magnitude assumed to be the weight)
n = abs(w-w_estimate).argmin()                                                  # the closest ω to ω0 is taken as the peak frequency.
phase = angle(Y[n])                                                             # phase corresponding to estimated ω0.

print("Calculated value of w0 in the presence of noise : ",w_estimate)
print("Calculated value of delta in the presence of noise : ",phase)

# Spectrum of cos(16(1.5+t/2*pi)t) ("Chirped signal")

t = linspace(-pi,pi,1025); t = t[:-1]
dt = t[1]-t[0]; fmax = 1/dt
n = arange(1024)

wnd = fftshift(0.54+0.46*cos(2*pi*n/1024))                                      # Hamming window for 1024 point DFT

y = cos(16*t*(1.5 + t/(2*pi)))
y[0]=0
y = fftshift(y)
Y = fftshift(fft(y))/1024.0
w = linspace(-pi*fmax,pi*fmax,1025); w = w[:-1]

fig_plot(7,w,Y,150,r"Spectrum of Chirped Signal",r"$|Y|\rightarrow$",r"Phase of $Y\rightarrow$",r"$\omega\rightarrow$")

# Surface plot: frequency of the signal vs time

Y_magnitude = zeros((16,64))                                                    # 2D array to store magnitude of DFT 
Y_phase = zeros((16,64))                                                        # 2D array to store phase of DFT 
time_segment = split(t,16)                                                      # break the 1024 vector into pieces that are 64 samples wide

n = arange(64)
wnd = fftshift(0.54+0.46*cos(2*pi*n/64))                                        # Hamming window for 64 point DFT

for i in range(len(time_segment)):
	
	y = cos(16*time_segment[i]*(1.5 + time_segment[i]/(2*pi)))*wnd
	y[0] = 0
	y = fftshift(y)
	Y = fftshift(fft(y))/64.0
	Y_magnitude[i] = abs(Y)
	Y_phase[i] = angle(Y)

t = t[::64]	
w = linspace(-fmax*pi,fmax*pi,64+1); w = w[:-1]
t,w = meshgrid(t,w)

# Surface plot

fig1 = figure(8)
ax = fig1.add_subplot(111, projection='3d')
surf=ax.plot_surface(w,t,Y_magnitude.T,cmap='viridis',linewidth=0, antialiased=False)
fig1.colorbar(surf, shrink=0.5, aspect=5)
ax.set_title('surface plot - Magnitude');
ylabel(r"$\omega\rightarrow$")
xlabel(r"$t\rightarrow$")

show()

fig1 = figure(9)
ax = fig1.add_subplot(111, projection='3d')
surf=ax.plot_surface(w,t,Y_phase.T,cmap='viridis',linewidth=0, antialiased=False)
fig1.colorbar(surf, shrink=0.5, aspect=5)
ax.set_title('surface plot - Phase');
ylabel(r"$\omega\rightarrow$")
xlabel(r"$t\rightarrow$")

show()

# Hamming Window

window = hamming(2000)
figure(10)
plot(window)
title("Hamming window")
ylabel("Amplitude")
xlabel("Sample")
show()